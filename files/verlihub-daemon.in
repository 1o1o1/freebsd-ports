#!/bin/sh

# $FreeBSD$
#
# PROVIDE: verlihub
# REQUIRE: DAEMON mysql
#
# Add the following lines to /etc/rc.conf.local or /etc/rc.conf
# to enable this service:
#
# verlihub_enable (bool):   Set to NO by default.
#               			Set it to YES to enable verlihub.
# verlihub_configdir (path):   The directory where the verlihub config files are
# verlihub_process_owner (string):	Specify which user should run verlihub
#

. /etc/rc.subr

name="verlihub"
procname="vh_daemon"
rcvar=`set_rcvar`

# Load default configs
load_rc_config $name
: ${verlihub_enable="NO"}
: ${verlihub_configdir="%%PREFIX%%/etc/verlihub/"}
: ${verlihub_user="root"}

# Set files
pidfile="${verlihub_configdir}/pid"
log_file="${verlihub_configdir}/log"
err_file="${verlihub_configdir}/err"
required_dirs="${verlihub_configdir}"
required_files="${verlihub_configdir}/dbconfig"

# Set commands
command="%%PREFIX%%/bin/${procname} %%PREFIX%%/bin/${name}"
command_args=">$log_file 2>$err_file &"
start_cmd="start"
stop_cmd="stop"
restart_cmd="restart"

start()
{
	pid=$(check_pidfile ${pidfile} "%%PREFIX%%/bin/${procname}" "%%PREFIX%%/bin/bash")
        if [ -n "${pid}" ]; then
		err 1 "hub is already running with PID ${pid}"
	fi

	info "starting hub with config folder '${verlihub_configdir}'"

	# Save old files
        if [ -f ${log_file} ]; then
		info "saving backup for log file"
		mv -f ${log_file} "${log_file}.old"
        fi;
        if [ -f ${err_file} ]; then
		info "saving backup for error file"
		mv -f ${err_file} "${err_file}.old"
        fi;

	# Run hub
	export VERLIHUB_CFG=${verlihub_configdir};
	su -m ${verlihub_user} -c "${command} ${command_args}"

	# Check if pid is returned
	sleep 2
	pid=$(check_process "%%PREFIX%%/bin/${procname}" "%%PREFIX%%/bin/bash")
	echo ${pid} > ${pidfile}

	# Check if hub is running
	pid=$(check_pidfile ${pidfile} "%%PREFIX%%/bin/${procname}" "%%PREFIX%%/bin/bash")
	if [ ! -n "${pid}" ]; then
		rm -f ${pidfile}
		err 1 "hub is not running. Please check '${log_file}' and '${error_file}' for more information"
	fi

	return 0;
}

stop()
{
	# Check if hub is already running
	pid=$(check_pidfile ${pidfile} "%%PREFIX%%/bin/${procname}" "%%PREFIX%%/bin/bash")
	if [ ! -n "${pid}" ]; then
		err 1 "hub with config path '${verlihub_configdir}' is not running"
	fi

	info "stopping verlihub"
	if ! kill ${pid} > /dev/null 2>&1 ; then
		err 1 " USER HAS NO RIGHT TO STOP THE PROCESS\nPlease use 'kill -9 $PID_RESULT' as root" 
	fi
	rm -f ${pidfile}

	return 0;
}

restart()
{
	stop;
	start;
}

run_rc_command "$1"
